// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isGithubUser  Boolean?
  Session       Session[]
  Enrollment    Enrollment[]
  ticketData    ticketData[]
  Vacancies     Vacancies[]
  ActivitySeats ActivitySeats[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ticketData {
  id           Int     @id @default(autoincrement())
  type         String  @db.VarChar(255)
  value        Int
  accomodation Boolean
  userId       Int     @unique
  User         User    @relation(fields: [userId], references: [id])
}

model Hotels {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  image     String      @db.VarChar(255)
  Bedrooms  Bedrooms[]
  Vacancies Vacancies[]
}

model Bedrooms {
  id      Int         @id @default(autoincrement())
  number  Int
  hotelId Int
  type    Type
  Hotel   Hotels      @relation(fields: [hotelId], references: [id])
  Vacancy Vacancies[]
}

model Vacancies {
  id          Int      @id @default(autoincrement())
  isAvailable Boolean
  bedroomId   Int
  hotelId     Int
  userId      Int?     @unique
  Bedroom     Bedrooms @relation(fields: [bedroomId], references: [id])
  Hotel       Hotels   @relation(fields: [hotelId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
}

model EventDay {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  Activities Activities[]
}

model Activities {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  startTime     String
  endTime       String
  local         Local
  eventDayId    Int
  seats         Int
  EventDay      EventDay        @relation(fields: [eventDayId], references: [id])
  ActivitySeats ActivitySeats[]
  @@index([eventDayId])
}

model ActivitySeats {
  id         Int        @id @default(autoincrement())
  activityId Int
  userId     Int
  Activity   Activities @relation(fields: [activityId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

enum Type {
  SINGLE
  DOUBLE
  TRIPLE
}

enum Local {
  MAIN
  LATERAL
  WORKSHOP
}
